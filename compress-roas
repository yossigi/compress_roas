#! /usr/bin/python

import os
import argparse
from IPSortedStringTrie import Trie
import map_functions as binTools
import subprocess


def check_dir(d):
  if not os.path.isdir(d):
    raise argparse.ArgumentTypeError("%r is not a directory" % d)
  return d

parser = argparse.ArgumentParser(description ="Scan for ROA's and compress them")
parser.add_argument("rcynic_dir", nargs = "+", type = check_dir,
                     help = "rcynic authenticated output directory")

args = parser.parse_args()

terminal = subprocess.Popen(['scan_roas' , args.rcynic_dir[0] ], stdout=subprocess.PIPE)
output = terminal.communicate()[0]


def getROA(output):
    IPdict = dict()
    output = output[:-1].split('\n')
    for line in output:
        line = line.split(' ')
        Time = line[0]
        AS = int(line[1])
        IP = line[2:]
        for ip in IP:
            ip = ip.split('-')
            prefix = ip[0]
            key = binTools.prefix_to_key(prefix, AS)
            try:
                maxLength = int(ip[1])
		prefixLength = len(key.split('$')[2])
                # print prefixLength
                if maxLength < prefixLength:
                    continue # To skip the prefix's in which the maxLength is less that the prefix length.
            except IndexError: # If a max Length doesn't exist.
                maxLength = len(key) - 3 - len(str(bin(AS))[2:]) # Because the '$'s and v number {0,1} and AS
            if key in IPdict: # To handle duplicates with a diffrent max Length, just take the max of both.
                IPdict[key] = [Time,AS,prefix,max(maxLength,IPdict[key][3])]
            else:
                IPdict.update(ipReady(Time,AS, prefix, maxLength,key))

    return IPdict


def ipReady(Time,AS,prefix, maxLength,key):
  ''' Return a dictionary object of the input '''
  return {key: [Time, AS, prefix, maxLength]}

t = Trie(getROA(output)) #To generate the dictionary as an input to the Trie.
t.combine_items() # Compress the data in the Trie.
t.dec_items() # Print the output.
